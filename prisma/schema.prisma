generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model mastra_evals {
  input         String
  output        String
  result        Json
  agent_name    String
  metric_name   String
  instructions  String
  test_info     Json?
  global_run_id String
  run_id        String
  created_at    DateTime  @db.Timestamp(6)
  createdAt     DateTime? @db.Timestamp(6)
  created_atZ   DateTime? @default(now()) @db.Timestamptz(6)
  createdAtZ    DateTime? @default(now()) @db.Timestamptz(6)

  @@index([agent_name, created_at(sort: Desc)], map: "public_mastra_evals_agent_name_created_at_idx")
  @@ignore
}

model mastra_messages {
  id         String    @id
  thread_id  String
  content    String
  role       String
  type       String
  createdAt  DateTime  @db.Timestamp(6)
  resourceId String?
  createdAtZ DateTime? @default(now()) @db.Timestamptz(6)

  @@index([thread_id, createdAt(sort: Desc)], map: "public_mastra_messages_thread_id_createdat_idx")
}

model mastra_resources {
  id            String    @id
  workingMemory String?
  metadata      Json?
  createdAt     DateTime  @db.Timestamp(6)
  updatedAt     DateTime  @db.Timestamp(6)
  createdAtZ    DateTime? @default(now()) @db.Timestamptz(6)
  updatedAtZ    DateTime? @default(now()) @db.Timestamptz(6)
}

model mastra_scorers {
  id                   String    @id
  scorerId             String
  traceId              String?
  runId                String
  scorer               Json
  preprocessStepResult Json?
  extractStepResult    Json?
  analyzeStepResult    Json?
  score                Float
  reason               String?
  metadata             Json?
  preprocessPrompt     String?
  extractPrompt        String?
  generateScorePrompt  String?
  generateReasonPrompt String?
  analyzePrompt        String?
  reasonPrompt         String?
  input                Json
  output               Json
  additionalContext    Json?
  runtimeContext       Json?
  entityType           String?
  entity               Json?
  entityId             String?
  source               String
  resourceId           String?
  threadId             String?
  createdAt            DateTime  @db.Timestamp(6)
  updatedAt            DateTime  @db.Timestamp(6)
  createdAtZ           DateTime? @default(now()) @db.Timestamptz(6)
  updatedAtZ           DateTime? @default(now()) @db.Timestamptz(6)
}

model mastra_threads {
  id         String    @id
  resourceId String
  title      String
  metadata   String?
  createdAt  DateTime  @db.Timestamp(6)
  updatedAt  DateTime  @db.Timestamp(6)
  createdAtZ DateTime? @default(now()) @db.Timestamptz(6)
  updatedAtZ DateTime? @default(now()) @db.Timestamptz(6)

  @@index([resourceId, createdAt(sort: Desc)], map: "public_mastra_threads_resourceid_createdat_idx")
}

model mastra_traces {
  id           String    @id
  parentSpanId String?
  name         String
  traceId      String
  scope        String
  kind         Int
  attributes   Json?
  status       Json?
  events       Json?
  links        Json?
  other        String?
  startTime    BigInt
  endTime      BigInt
  createdAt    DateTime  @db.Timestamp(6)
  createdAtZ   DateTime? @default(now()) @db.Timestamptz(6)

  @@index([name, startTime(sort: Desc)], map: "public_mastra_traces_name_starttime_idx")
}

model mastra_workflow_snapshot {
  workflow_name String
  run_id        String
  resourceId    String?
  snapshot      String
  createdAt     DateTime  @db.Timestamp(6)
  updatedAt     DateTime  @db.Timestamp(6)
  createdAtZ    DateTime? @default(now()) @db.Timestamptz(6)
  updatedAtZ    DateTime? @default(now()) @db.Timestamptz(6)

  @@unique([workflow_name, run_id], map: "public_mastra_workflow_snapshot_workflow_name_run_id_key")
}

model ServerRegistration {
  id           String   @id @default(cuid())
  serverId     String   @unique
  name         String
  clientId     String   @unique
  clientSecret String
  scopes       String[] // Array of scopes
  registeredBy String   @default("system")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("server_registrations")
}
